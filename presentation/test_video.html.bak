<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>DIY APIs</title>

		<meta name="description" content="A Do-It-Yourself Approach To Creating Custom Read-Only APIs using Sierra SQL and PHP">
		<meta name="author" content="Ray Voelker">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/simple.css" id="theme">

		<!-- Code syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">


		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
				<section data-background = "./img/robot.jpg">
					<h1 style="
						color:white;
						text-shadow: 1px 1px 10px black;
					">DIY APIs</h1>
					<h3 style="
						color:white;
						text-shadow: 1px 1px 10px black;
					">A Do-It-Yourself Approach To <br /> 
					Creating Custom Read-Only APIs <br />
					using Sierra SQL and PHP
					</h3>
					<p>
						<small style="
						color:white;
						text-shadow: 1px 1px 10px black;
						">Ray Voelker<br />
						University of Dayton Libraries
						</small>
					</p>
					
					<aside class="notes">
					Perhaps you’ve created some SQL statements using Sierra’s new SQL feature… now what?
					<br /><br />
					This presentation discusses the concept of creating relatively simple Application Programming Interfaces (or APIs) that utilize the Sierra SQL feature for use in other projects such as web applications, or Google Sheets. 
					<br /><br />
					Part of the presentation will focus on the demonstration of a few practical examples, written in PHP that including a web application that calls upon a custom API to show current available study rooms, an API designed to work with Google Sheets - populating columns of a sheet with data coming from the catalog triggered on the scan or input of an item’s barcode, and an API designed to produced a list of items between two LC call numbers (or scanned item barcodes) for a given location, and possibly a few other small examples.  
					<br /><br />
					I also plan on discussing some of the challenges associated with this Do-It-Yourself approach, some reason why we may want to use this instead of Sierra’s API and vice versa. This presentation is intended for audience members with an intermediate to advanced level of skill, but there could be some useful information for anyone curious about using Sierra’s SQL feature.
					</aside>
					
					
					
					</section>
					
				</section>
				<!-- /section -->
				
				<section>
					<section>
					<h3>Study Room Availability Sierra SQL</h3>
					<pre><code data-trim>
SELECT 
i.item_status_code, 
c.checkout_gmt, 
c.due_gmt, 
p.best_title, 
p.best_title_norm 

--- continued ... ---
</code></pre>
					</section>
					
					<section>
					<h3>Study Room Availability Sierra SQL (cont'd)</h3>
					<pre><code data-trim>
FROM 
sierra_view.item_record						AS i
					
LEFT OUTER JOIN sierra_view.checkout				AS c 
ON (i.record_id = c.item_record_id) 					
					
LEFT OUTER JOIN sierra_view.bib_record_item_record_link		AS l 
ON (i.record_id = l.item_record_id) 

JOIN sierra_view.bib_record					AS b 
ON (l.bib_record_id = b.record_id) 

JOIN sierra_view.bib_record_property				AS p 
ON (b.record_id = p.bib_record_id) 

--- continued ... ---
				</code></pre>
				</section>

				<section>
				<h3>Study Room Availability Sierra SQL (cont'd)</h3>
				<pre><code data-trim>
WHERE 
(i.itype_code_num = 69 OR i.itype_code_num = 71)  
AND i.is_suppressed = FALSE 
AND b.is_suppressed = FALSE 

ORDER BY 
p.best_title_norm ASC 
---					
					</code></pre>
					</section>
				
				</section>
				<!-- /section -->

			</div> <!-- /slides -->
		</div> <!-- /reveal -->

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.js"></script>

		<script>

			// Full list of configuration options available at:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				transition: 'slide', // none/fade/slide/convex/concave/zoom

				// Optional reveal.js plugins
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true },
					{ src: 'plugin/notes/notes.js', async: true }
				]
			});

		</script>

	</body>
</html>
